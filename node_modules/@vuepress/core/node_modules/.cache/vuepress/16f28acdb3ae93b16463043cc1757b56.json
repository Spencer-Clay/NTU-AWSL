{"remainingRequest":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/spencer/WebstormProjects/NTU-AWSL/docs/wiki/iot/HIKVISION/HIKVISION DSIDSIPC 等设备 远程命令执行漏洞 CVE-2021-36260.md?vue&type=template&id=e49c6bdc&","dependencies":[{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/docs/wiki/iot/HIKVISION/HIKVISION DSIDSIPC 等设备 远程命令执行漏洞 CVE-2021-36260.md","mtime":1647504198444},{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/cache-loader/dist/cjs.js","mtime":1647523943889},{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647523947557},{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/cache-loader/dist/cjs.js","mtime":1647523943889},{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/vue-loader/lib/index.js","mtime":1647523947557},{"path":"/Users/spencer/WebstormProjects/NTU-AWSL/node_modules/@vuepress/markdown-loader/index.js","mtime":1647523942629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDEnLHthdHRyczp7ImlkIjoiaGlrdmlzaW9uLWRzLWlkcy1pcGMt562J6K6+5aSHLei/nOeoi+WRveS7pOaJp+ihjOa8j+a0ni1jdmUtMjAyMS0zNjI2MCJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2hpa3Zpc2lvbi1kcy1pZHMtaXBjLeetieiuvuWkhy3ov5znqIvlkb3ku6TmiafooYzmvI/mtJ4tY3ZlLTIwMjEtMzYyNjAifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgSElLVklTSU9OIERTL0lEUy9JUEMg562J6K6+5aSHIOi/nOeoi+WRveS7pOaJp+ihjOa8j+a0niBDVkUtMjAyMS0zNjI2MCIpXSksX3ZtLl92KCIgIiksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6Iua8j+a0nuaPj+i/sCJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI+a8j+a0nuaPj+i/sCJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiDmvI/mtJ7mj4/ov7AiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCLmtbflurflqIHop4bpg6jliIbkuqflk4HkuK3nmoR3ZWLmqKHlnZflrZjlnKjkuIDkuKrlkb3ku6Tms6jlhaXmvI/mtJ7vvIznlLHkuo7lr7novpPlhaXlj4LmlbDmoKHpqozkuI3lhYXliIbvvIzmlLvlh7vogIXlj6/ku6Xlj5HpgIHluKbmnInmgbbmhI/lkb3ku6TnmoTmiqXmlofliLDlj5flvbHlk43orr7lpIfvvIzmiJDlip/liKnnlKjmraTmvI/mtJ7lj6/ku6Xlr7zoh7Tlkb3ku6TmiafooYzjgILmtbflurflqIHop4blt7Llj5HluIPniYjmnKzkv67lpI3or6XmvI/mtJ4iKV0pLF92bS5fdigiICIpLF9jKCdoMicse2F0dHJzOnsiaWQiOiLmvI/mtJ7lvbHlk40ifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiPmvI/mtJ7lvbHlk40ifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIg5ryP5rSe5b2x5ZONIildKSxfdm0uX3YoIiAiKSxfYygncCcsW19jKCdpbWcnLHthdHRyczp7InNyYyI6cmVxdWlyZSgiLi4vLi4vLi4vLnZ1ZXByZXNzL3B1YmxpYy9pbWcvMTYzNjQ0MDIwNzE1NC0zOTFmZmE1Ny1lN2RmLTQzZDctOTliZC02OThlMTZjODIwMDktMjAyMjAzMTQxMzIxMzU2MDAucG5nIiksImFsdCI6ImltZyJ9fSldKSxfdm0uX3YoIiAiKSxfYygncCcsW19jKCdpbWcnLHthdHRyczp7InNyYyI6cmVxdWlyZSgiLi4vLi4vLi4vLnZ1ZXByZXNzL3B1YmxpYy9pbWcvMTYzNjQ0MDIxNzk2Ny1hNjg0ZTU0OS1mMTJhLTQ1OGUtYTlmOS03MzBjZjJiOWFhZTEtMjAyMjAzMTQxMzIxMzU3MDQucG5nIiksImFsdCI6ImltZyJ9fSldKSxfdm0uX3YoIiAiKSxfYygncCcsW19jKCdpbWcnLHthdHRyczp7InNyYyI6cmVxdWlyZSgiLi4vLi4vLi4vLnZ1ZXByZXNzL3B1YmxpYy9pbWcvMTYzNjQ0MDIyNTY5MC1lZmUxZjdhMi1iMjM2LTQ1NDctOWZlYy0xZmNiYTFmOWI3YWMtMjAyMjAzMTQxMzIxMzU3NjIucG5nIiksImFsdCI6ImltZyJ9fSldKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoi572R57uc5rWL57uYIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIj572R57uc5rWL57uYIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIOe9kee7nOa1i+e7mCIpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCLinIVcIjY3MS0xZTAtNTg3ZWM0YTFcIiIpXSldKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoi5ryP5rSe5aSN546wIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIj5ryP5rSe5aSN546wIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIOa8j+a0nuWkjeeOsCIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIueZu+W9lemhtemdoiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfYygnaW1nJyx7YXR0cnM6eyJzcmMiOnJlcXVpcmUoIi4uLy4uLy4uLy52dWVwcmVzcy9wdWJsaWMvaW1nLzE2MzY0NDAyNTgyMTYtNDhkM2RmZWItZTg0Ny00NjJkLTgxYzAtYWZiYzZlNGE0YmIzLTIwMjIwMzE0MTMyMTM1OTUyLnBuZyIpLCJhbHQiOiJpbWcifX0pXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIuS9v+eUqEVYUOWRveS7pOaJp+ihjCIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfYygnaW1nJyx7YXR0cnM6eyJzcmMiOnJlcXVpcmUoIi4uLy4uLy4uLy52dWVwcmVzcy9wdWJsaWMvaW1nLzE2MzY0NDAyOTAyNjktYTU2NWEwZDktNGFiZS00NWNlLWI4YTYtNzVkMmQzNTViMjUyLTIwMjIwMzE0MTMyMTM1NTM2LnBuZyIpLCJhbHQiOiJpbWcifX0pXSksX3ZtLl92KCIgIiksX2MoJ2gyJyx7YXR0cnM6eyJpZCI6Iua8j+a0nnBvYyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI+a8j+a0nnBvYyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiDmvI/mtJ5QT0MiKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtcGhwIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtcGhwIn19LFtfYygnY29kZScsW192bS5fdigiIyBFeHBsb2l0IFRpdGxlOiBIaWt2aXNpb24gV2ViIFNlcnZlciBCdWlsZCAyMTA3MDIgLSBDb21tYW5kIEluamVjdGlvblxuIyBFeHBsb2l0IEF1dGhvcjogYmFzaGlzXG4jIFZlbmRvciBIb21lcGFnZTogaHR0cHM6Ly93d3cuaGlrdmlzaW9uLmNvbS9cbiMgVmVyc2lvbjogMS4wXG4jIENWRTogQ1ZFLTIwMjEtMzYyNjBcbiMgUmVmZXJlbmNlOiBodHRwczovL3dhdGNoZnVsaXAuZ2l0aHViLmlvLzIwMjEvMDkvMTgvSGlrdmlzaW9uLUlQLUNhbWVyYS1VbmF1dGhlbnRpY2F0ZWQtUkNFLmh0bWxcblxuIyBBbGwgY3JlZGl0IHRvIFdhdGNoZnVsX0lQXG5cbiMhL3Vzci9iaW4vZW52IHB5dGhvbjNcblxuXCJcIlwiXG5Ob3RlOlxuMSkgIFRoaXMgY29kZSB3aWxsIF9ub3RfIHZlcmlmeSBpZiByZW1vdGUgaXMgSGlrdmlzaW9uIGRldmljZSBvciBub3QuXG4yKSAgTW9zdCBvZiBteSBpbnRlcmVzdCBpbiB0aGlzIGNvZGUgaGFzIGJlZW4gY29uY2VudHJhdGVkIG9uIGhvdyB0b1xuICAgIHJlbGlhYmx5IGRldGVjdCB2dWxuZXJhYmxlIGFuZC9vciBleHBsb2l0YWJsZSBkZXZpY2VzLlxuICAgIFNvbWUgZGV2aWNlcyBhcmUgZWFzeSB0byBkZXRlY3QsIHZlcmlmeSBhbmQgZXhwbG9pdCB0aGUgdnVsbmVyYWJpbGl0eSxcbiAgICBvdGhlciBkZXZpY2VzIG1heSBiZSB2dWxuZXJhYmxlIGJ1dCBub3Qgc28gZWFzeSB0byB2ZXJpZnkgYW5kIGV4cGxvaXQuXG4gICAgSSB0aGluayB0aGUgY29tYmluZWQgdmVyaWZpY2F0aW9uIGNvZGUgc2hvdWxkIGhhdmUgdmVyeSBoaWdoIGFjY3VyYWN5LlxuMykgICdzYWZlIGNoZWNrJyAoLS1jaGVjaykgd2lsbCB0cnkgd3JpdGUgYW5kIHJlYWQgZm9yIHZlcmlmaWNhdGlvblxuICAgICd1bnNhZmUgY2hlY2snICgtLXJlYm9vdCkgd2lsbCB0cnkgcmVib290IHRoZSBkZXZpY2UgZm9yIHZlcmlmaWNhdGlvblxuXG5bRXhhbXBsZXNdXG5TYWZlIHZ1bG5lcmFiaWxpdHkvdmVyaWZ5IGNoZWNrOlxuICAgICQuL0NWRS0yMDIxLTM2MjYwLnB5IC0tcmhvc3QgMTkyLjE2OC41Ny4yMCAtLXJwb3J0IDgwODAgLS1jaGVja1xuXG5TYWZlIGFuZCB1bnNhZmUgdnVsbmVyYWJpbGl0eS92ZXJpZnkgY2hlY2s6XG4od2lsbCBvbmx5IHVzZSAndW5zYWZlIGNoZWNrJyBpZiBub3QgdmVyaWZpZWQgd2l0aCAnc2FmZSBjaGVjaycpXG4gICAgJC4vQ1ZFLTIwMjEtMzYyNjAucHkgLS1yaG9zdCAxOTIuMTY4LjU3LjIwIC0tcnBvcnQgODA4MCAtLWNoZWNrIC0tcmVib290XG5cblVuc2FmZSB2dWxuZXJhYmlsaXR5L3ZlcmlmeSBjaGVjazpcbiAgICAkLi9DVkUtMjAyMS0zNjI2MC5weSAtLXJob3N0IDE5Mi4xNjguNTcuMjAgLS1ycG9ydCA4MDgwIC0tcmVib290XG5cbkxhdW5jaCBhbmQgY29ubmVjdCB0byBTU0ggc2hlbGw6XG4gICAgJC4vQ1ZFLTIwMjEtMzYyNjAucHkgLS1yaG9zdCAxOTIuMTY4LjU3LjIwIC0tcnBvcnQgODA4MCAtLXNoZWxsXG5cbkV4ZWN1dGUgY29tbWFuZDpcbiAgICAkLi9DVkUtMjAyMS0zNjI2MC5weSAtLXJob3N0IDE5Mi4xNjguNTcuMjAgLS1ycG9ydCA4MDgwIC0tY21kIFwibHMgLWxcIlxuXG5FeGVjdXRlIGJsaW5kIGNvbW1hbmQ6XG4gICAgJC4vQ1ZFLTIwMjEtMzYyNjAucHkgLS1yaG9zdCAxOTIuMTY4LjU3LjIwIC0tcnBvcnQgODA4MCAtLWNtZF9ibGluZCBcInJlYm9vdFwiXG5cbiQuL0NWRS0yMDIxLTM2MjYwLnB5IC1oXG5bKl0gSGlrdmlzaW9uIENWRS0yMDIxLTM2MjYwXG5bKl0gUG9DIGJ5IGJhc2hpcyAiKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiB0YWcifX0sW19jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPCIpXSksX3ZtLl92KCJtY3ciKV0pLF92bS5fdigiICIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIGF0dHItbmFtZSJ9fSxbX3ZtLl92KCJub2VtYWlsIildKSxfdm0uX3YoIiAiKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBhdHRyLW5hbWUifX0sW192bS5fdigiZXUiKV0pLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHB1bmN0dWF0aW9uIn19LFtfdm0uX3YoIj4iKV0pXSksX3ZtLl92KCIgKDIwMjEpXG51c2FnZTogQ1ZFLTIwMjEtMzYyNjAucHkgWy1oXSAtLXJob3N0IFJIT1NUIFstLXJwb3J0IFJQT1JUXSBbLS1jaGVja11cbiAgICAgICAgICAgICAgICAgICAgICAgICBbLS1yZWJvb3RdIFstLXNoZWxsXSBbLS1jbWQgQ01EXVxuICAgICAgICAgICAgICAgICAgICAgICAgIFstLWNtZF9ibGluZCBDTURfQkxJTkRdIFstLW5vdmVyaWZ5XVxuICAgICAgICAgICAgICAgICAgICAgICAgIFstLXByb3RvIHtodHRwLGh0dHBzfV1cblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICAgICAgICAgICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtLXJob3N0IFJIT1NUICAgICAgICAgUmVtb3RlIFRhcmdldCBBZGRyZXNzIChJUC9GUUROKVxuICAtLXJwb3J0IFJQT1JUICAgICAgICAgUmVtb3RlIFRhcmdldCBQb3J0XG4gIC0tY2hlY2sgICAgICAgICAgICAgICBDaGVjayBpZiB2dWxuZXJhYmxlXG4gIC0tcmVib290ICAgICAgICAgICAgICBSZWJvb3QgaWYgdnVsbmVyYWJsZVxuICAtLXNoZWxsICAgICAgICAgICAgICAgTGF1bmNoIFNTSCBzaGVsbFxuICAtLWNtZCBDTUQgICAgICAgICAgICAgZXhlY3V0ZSBjbWQgKGkuZTogXCJscyAtbFwiKVxuICAtLWNtZF9ibGluZCBDTURfQkxJTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGUgYmxpbmQgY21kIChpLmU6IFwicmVib290XCIpXG4gIC0tbm92ZXJpZnkgICAgICAgICAgICBEbyBub3QgdmVyaWZ5IGlmIHZ1bG5lcmFibGVcbiAgLS1wcm90byB7aHR0cCxodHRwc30gIFByb3RvY29sIHVzZWRcbiRcblwiXCJcIlxuXG5pbXBvcnQgb3NcbmltcG9ydCBhcmdwYXJzZVxuaW1wb3J0IHRpbWVcblxuaW1wb3J0IHJlcXVlc3RzXG5mcm9tIHJlcXVlc3RzIGltcG9ydCBwYWNrYWdlc1xuZnJvbSByZXF1ZXN0cy5wYWNrYWdlcyBpbXBvcnQgdXJsbGliM1xuZnJvbSByZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzIGltcG9ydCBleGNlcHRpb25zXG5cblxuY2xhc3MgSHR0cChvYmplY3QpOlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCByaG9zdCwgcnBvcnQsIHByb3RvLCB0aW1lb3V0PTYwKTpcbiAgICAgICAgc3VwZXIoSHR0cCwgc2VsZikuX19pbml0X18oKVxuXG4gICAgICAgIHNlbGYucmhvc3QgPSByaG9zdFxuICAgICAgICBzZWxmLnJwb3J0ID0gcnBvcnRcbiAgICAgICAgc2VsZi5wcm90byA9IHByb3RvXG4gICAgICAgIHNlbGYudGltZW91dCA9IHRpbWVvdXRcblxuICAgICAgICBzZWxmLnJlbW90ZSA9IE5vbmVcbiAgICAgICAgc2VsZi51cmkgPSBOb25lXG5cbiAgICAgICAgXCJcIlwiIE1vc3QgZGV2aWNlcyB3aWxsIHVzZSBzZWxmLXNpZ25lZCBjZXJ0aWZpY2F0ZXMsIHN1cHByZXNzIGFueSB3YXJuaW5ncyBcIlwiXCJcbiAgICAgICAgcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMuZXhjZXB0aW9ucy5JbnNlY3VyZVJlcXVlc3RXYXJuaW5nKVxuXG4gICAgICAgIHNlbGYucmVtb3RlID0gcmVxdWVzdHMuU2Vzc2lvbigpXG5cbiAgICAgICAgc2VsZi5faW5pdF91cmkoKVxuXG4gICAgICAgIHNlbGYucmVtb3RlLmhlYWRlcnMudXBkYXRlKHtcbiAgICAgICAgICAgICdIb3N0JzogZid7c2VsZi5yaG9zdH06e3NlbGYucnBvcnR9JyxcbiAgICAgICAgICAgICdBY2NlcHQnOiAnKi8qJyxcbiAgICAgICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsXG4gICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LHN2O3E9MC44JyxcbiAgICAgICAgfSlcbiAgICAgICAgXCJcIlwiXG4gICAgICAgIHNlbGYucmVtb3RlLnByb3hpZXMudXBkYXRlKHtcbiAgICAgICAgICAgICMgJ2h0dHAnOiAnaHR0cDovLzEyNy4wLjAuMTo4MDgwJyxcbiAgICAgICAgfSlcbiAgICAgICAgXCJcIlwiXG5cbiAgICBkZWYgc2VuZChzZWxmLCB1cmw9Tm9uZSwgcXVlcnlfYXJncz1Ob25lLCB0aW1lb3V0PTUpOlxuXG4gICAgICAgIGlmIHF1ZXJ5X2FyZ3M6XG4gICAgICAgICAgICBcIlwiXCJTb21lIGRldmljZXMgY2FuIGhhbmRsZSBtb3JlLCBvdGhlcnMgbGVzcywgMjIgYnl0ZXMgc2VlbXMgbGlrZSBhIGdvb2QgY29tcHJvbWlzZVwiXCJcIlxuICAgICAgICAgICAgaWYgbGVuKHF1ZXJ5X2FyZ3MpID4gMjI6XG4gICAgICAgICAgICAgICAgcHJpbnQoZidbIV0gRXJyb3I6IENvbW1hbmQgXCJ7cXVlcnlfYXJnc31cIiB0byBsb25nICh7bGVuKHF1ZXJ5X2FyZ3MpfSknKVxuICAgICAgICAgICAgICAgIHJldHVybiBOb25lXG5cbiAgICAgICAgXCJcIlwiVGhpcyB3ZWlyZCBjb2RlIHdpbGwgdHJ5IGF1dG9tYXRpY2FsbHkgc3dpdGNoIGJldHdlZW4gaHR0cC9odHRwc1xuICAgICAgICBhbmQgdXBkYXRlIEhvc3RcbiAgICAgICAgXCJcIlwiXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIGlmIHVybCBhbmQgbm90IHF1ZXJ5X2FyZ3M6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0KHVybCwgdGltZW91dClcbiAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgZGF0YSA9IHNlbGYucHV0KCcvU0RLL3dlYkxhbmd1YWdlJywgcXVlcnlfYXJncywgdGltZW91dClcbiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOlxuICAgICAgICAgICAgc2VsZi5wcm90byA9ICdodHRwcycgaWYgc2VsZi5wcm90byA9PSAnaHR0cCcgZWxzZSAnaHR0cHMnXG4gICAgICAgICAgICBzZWxmLl9pbml0X3VyaSgpXG4gICAgICAgICAgICB0cnk6XG4gICAgICAgICAgICAgICAgaWYgdXJsIGFuZCBub3QgcXVlcnlfYXJnczpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0KHVybCwgdGltZW91dClcbiAgICAgICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gc2VsZi5wdXQoJy9TREsvd2ViTGFuZ3VhZ2UnLCBxdWVyeV9hcmdzLCB0aW1lb3V0KVxuICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOlxuICAgICAgICAgICAgICAgIHJldHVybiBOb25lXG4gICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb246XG4gICAgICAgICAgICByZXR1cm4gTm9uZVxuICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6XG4gICAgICAgICAgICByZXR1cm4gTm9uZVxuXG4gICAgICAgIFwiXCJcIjMwMiB3aGVuIHJlcXVlc3RpbmcgaHR0cCBvbiBodHRwcyBlbmFibGVkIGRldmljZVwiXCJcIlxuXG4gICAgICAgIGlmIGRhdGEuc3RhdHVzX2NvZGUgPT0gMzAyOlxuICAgICAgICAgICAgcmVkaXJlY3QgPSBkYXRhLmhlYWRlcnMuZ2V0KCdMb2NhdGlvbicpXG4gICAgICAgICAgICBzZWxmLnVyaSA9IHJlZGlyZWN0WzpyZWRpcmVjdC5yZmluZCgnLycpXVxuICAgICAgICAgICAgc2VsZi5fdXBkYXRlX2hvc3QoKVxuICAgICAgICAgICAgaWYgdXJsIGFuZCBub3QgcXVlcnlfYXJnczpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXQodXJsLCB0aW1lb3V0KVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICBkYXRhID0gc2VsZi5wdXQoJy9TREsvd2ViTGFuZ3VhZ2UnLCBxdWVyeV9hcmdzLCB0aW1lb3V0KVxuXG4gICAgICAgIHJldHVybiBkYXRhXG5cbiAgICBkZWYgX3VwZGF0ZV9ob3N0KHNlbGYpOlxuICAgICAgICBpZiBub3Qgc2VsZi5yZW1vdGUuaGVhZGVycy5nZXQoJ0hvc3QnKSA9PSBzZWxmLnVyaVtzZWxmLnVyaS5yZmluZCgnOi8vJykgKyAzOl06XG4gICAgICAgICAgICBzZWxmLnJlbW90ZS5oZWFkZXJzLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgJ0hvc3QnOiBzZWxmLnVyaVtzZWxmLnVyaS5yZmluZCgnOi8vJykgKyAzOl0sXG4gICAgICAgICAgICB9KVxuXG4gICAgZGVmIF9pbml0X3VyaShzZWxmKTpcbiAgICAgICAgc2VsZi51cmkgPSAne3Byb3RvfTovL3tyaG9zdH06e3Jwb3J0fScuZm9ybWF0KHByb3RvPXNlbGYucHJvdG8sIHJob3N0PXNlbGYucmhvc3QsIHJwb3J0PXN0cihzZWxmLnJwb3J0KSlcblxuICAgIGRlZiBwdXQoc2VsZiwgdXJsLCBxdWVyeV9hcmdzLCB0aW1lb3V0KTpcbiAgICAgICAgXCJcIlwiQ29tbWFuZCBpbmplY3Rpb24gaW4gdGhlICIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI8IildKSxfdm0uX3YoImxhbmd1YWdlIildKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI+IildKV0pLF92bS5fdigiIHRhZ1wiXCJcIlxuICAgICAgICBxdWVyeV9hcmdzID0gJyIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHBocCBsYW5ndWFnZS1waHAifX0sW19jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIGRlbGltaXRlciBpbXBvcnRhbnQifX0sW192bS5fdigiPD8iKV0pLF92bS5fdigieG1sIHZlcnNpb24iKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBvcGVyYXRvciJ9fSxbX3ZtLl92KCI9IildKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBzdHJpbmcgZG91YmxlLXF1b3RlZC1zdHJpbmcifX0sW192bS5fdigiXCIxLjBcIiIpXSksX3ZtLl92KCIgZW5jb2RpbmciKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBvcGVyYXRvciJ9fSxbX3ZtLl92KCI9IildKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBzdHJpbmcgZG91YmxlLXF1b3RlZC1zdHJpbmcifX0sW192bS5fdigiXCJVVEYtOFwiIildKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBkZWxpbWl0ZXIgaW1wb3J0YW50In19LFtfdm0uX3YoIj8+IildKV0pLF92bS5fdigiJyBcXFxuICAgICAgICAgICAgICAgICAgICAgZiciKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiB0YWcifX0sW19jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPCIpXSksX3ZtLl92KCJsYW5ndWFnZSIpXSksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPiIpXSldKSxfdm0uX3YoIiQoe3F1ZXJ5X2FyZ3N9KSIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI8LyIpXSksX3ZtLl92KCJsYW5ndWFnZSIpXSksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPiIpXSldKSxfdm0uX3YoIidcbiAgICAgICAgcmV0dXJuIHNlbGYucmVtb3RlLnB1dChzZWxmLnVyaSArIHVybCwgZGF0YT1xdWVyeV9hcmdzLCB2ZXJpZnk9RmFsc2UsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwgdGltZW91dD10aW1lb3V0KVxuXG4gICAgZGVmIGdldChzZWxmLCB1cmwsIHRpbWVvdXQpOlxuICAgICAgICByZXR1cm4gc2VsZi5yZW1vdGUuZ2V0KHNlbGYudXJpICsgdXJsLCB2ZXJpZnk9RmFsc2UsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwgdGltZW91dD10aW1lb3V0KVxuXG5cbmRlZiBjaGVjayhyZW1vdGUsIGFyZ3MpOlxuICAgIFwiXCJcIlxuICAgIHN0YXR1c19jb2RlID09IDIwMCAoT0spO1xuICAgICAgICBWZXJpZmllZCB2dWxuZXJhYmxlIGFuZCBleHBsb2l0YWJsZVxuICAgIHN0YXR1c19jb2RlID09IDUwMCAoSW50ZXJuYWwgU2VydmVyIEVycm9yKTtcbiAgICAgICAgRGV2aWNlIG1heSBiZSB2dWxuZXJhYmxlLCBidXQgbW9zdCBsaWtlbHkgbm90XG4gICAgICAgIFRoZSBTREsgd2ViTGFuZ3VhZ2UgdGFnIGlzIHRoZXJlLCBidXQgZ2VuZXJhdGUgc3RhdHVzX2NvZGUgNTAwIHdoZW4gbGFuZ3VhZ2Ugbm90IGZvdW5kXG4gICAgICAgIEkuZS4gRXhpc3Q6ICIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI8IildKSxfdm0uX3YoImxhbmd1YWdlIildKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI+IildKV0pLF92bS5fdigiZW4iKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiB0YWcifX0sW19jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPC8iKV0pLF92bS5fdigibGFuZ3VhZ2UiKV0pLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHB1bmN0dWF0aW9uIn19LFtfdm0uX3YoIj4iKV0pXSksX3ZtLl92KCIgKDIwMCksIG5vdCBleGlzdDogIiksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiB0YWcifX0sW19jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHB1bmN0dWF0aW9uIn19LFtfdm0uX3YoIjwiKV0pLF92bS5fdigibGFuZ3VhZ2UiKV0pLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHB1bmN0dWF0aW9uIn19LFtfdm0uX3YoIj4iKV0pXSksX3ZtLl92KCJFTiIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI8LyIpXSksX3ZtLl92KCJsYW5ndWFnZSIpXSksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPiIpXSldKSxfdm0uX3YoIiAoNTAwKVxuICAgICAgICAoSXNzdWU6IENvdWxkIGFsc28gYmUgb3RoZXIgZGlyZWN0b3J5IHRoYW4gJ3dlYkxpYicsIHIvbyBGUyBldGMuLi4pXG4gICAgc3RhdHVzX2NvZGUgPT0gNDAxIChVbmF1dGhvcml6ZWQpO1xuICAgICAgICBEZWZpYW50bHkgbm90IHZ1bG5lcmFibGVcbiAgICBcIlwiXCJcbiAgICBpZiBhcmdzLm5vdmVyaWZ5OlxuICAgICAgICBwcmludChmJ1sqXSBOb3QgdmVyaWZ5aW5nIHJlbW90ZSBcInthcmdzLnJob3N0fTp7YXJncy5ycG9ydH1cIicpXG4gICAgICAgIHJldHVybiBUcnVlXG5cbiAgICBwcmludChmJ1sqXSBDaGVja2luZyByZW1vdGUgXCJ7YXJncy5yaG9zdH06e2FyZ3MucnBvcnR9XCInKVxuXG4gICAgZGF0YSA9IHJlbW90ZS5zZW5kKHVybD0nLycsIHF1ZXJ5X2FyZ3M9Tm9uZSlcbiAgICBpZiBkYXRhIGlzIE5vbmU6XG4gICAgICAgIHByaW50KGYnWy1dIENhbm5vdCBlc3RhYmxpc2ggY29ubmVjdGlvbiB0byBcInthcmdzLnJob3N0fTp7YXJncy5ycG9ydH1cIicpXG4gICAgICAgIHJldHVybiBOb25lXG4gICAgcHJpbnQoJ1tpXSBFVGFnOicsIGRhdGEuaGVhZGVycy5nZXQoJ0VUYWcnKSlcblxuICAgIGRhdGEgPSByZW1vdGUuc2VuZChxdWVyeV9hcmdzPSc+d2ViTGliL2MnKVxuICAgIGlmIGRhdGEgaXMgTm9uZSBvciBkYXRhLnN0YXR1c19jb2RlID09IDQwNDpcbiAgICAgICAgcHJpbnQoZidbLV0gXCJ7YXJncy5yaG9zdH06e2FyZ3MucnBvcnR9XCIgZG8gbm90IGxvb2tzIGxpa2UgSGlrdmlzaW9uJylcbiAgICAgICAgcmV0dXJuIEZhbHNlXG4gICAgc3RhdHVzX2NvZGUgPSBkYXRhLnN0YXR1c19jb2RlXG5cbiAgICBkYXRhID0gcmVtb3RlLnNlbmQodXJsPScvYycsIHF1ZXJ5X2FyZ3M9Tm9uZSlcbiAgICBpZiBub3QgZGF0YS5zdGF0dXNfY29kZSA9PSAyMDA6XG4gICAgICAgIFwiXCJcIldlIGNvdWxkIG5vdCB2ZXJpZnkgY29tbWFuZCBpbmplY3Rpb25cIlwiXCJcbiAgICAgICAgaWYgc3RhdHVzX2NvZGUgPT0gNTAwOlxuICAgICAgICAgICAgcHJpbnQoZidbLV0gQ291bGQgbm90IHZlcmlmeSBpZiB2dWxuZXJhYmxlIChDb2RlOiB7c3RhdHVzX2NvZGV9KScpXG4gICAgICAgICAgICBpZiBhcmdzLnJlYm9vdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tfcmVib290KHJlbW90ZSwgYXJncylcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHByaW50KGYnWytdIFJlbW90ZSBpcyBub3QgdnVsbmVyYWJsZSAoQ29kZToge3N0YXR1c19jb2RlfSknKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIHByaW50KCdbIV0gUmVtb3RlIGlzIHZlcmlmaWVkIGV4cGxvaXRhYmxlJylcbiAgICByZXR1cm4gVHJ1ZVxuXG5cbmRlZiBjaGVja19yZWJvb3QocmVtb3RlLCBhcmdzKTpcbiAgICBcIlwiXCJcbiAgICBXZSBzZW5kaW5nICdyZWJvb3QnLCB3YWl0IDIgc2VjLCB0aGVuIGNoZWNraW5nIHdpdGggR0VUIHJlcXVlc3QuXG4gICAgLSBpZiB0aGVyZSBpcyBkYXRhIHJldHVybmVkLCB3ZSBjYW4gYXNzdW1lIHJlbW90ZSBpcyBub3QgdnVsbmVyYWJsZS5cbiAgICAtIElmIHRoZXJlIGlzIG5vIGNvbm5lY3Rpb24gb3IgZGF0YSByZXR1cm5lZCwgd2UgY2FuIGFzc3VtZSByZW1vdGUgaXMgdnVsbmVyYWJsZS5cbiAgICBcIlwiXCJcbiAgICBpZiBhcmdzLmNoZWNrOlxuICAgICAgICBwcmludCgnW2ldIENoZWNraW5nIGlmIHZ1bG5lcmFibGUgd2l0aCBcInJlYm9vdFwiJylcbiAgICBlbHNlOlxuICAgICAgICBwcmludChmJ1sqXSBDaGVja2luZyByZW1vdGUgXCJ7YXJncy5yaG9zdH06e2FyZ3MucnBvcnR9XCIgd2l0aCBcInJlYm9vdFwiJylcbiAgICByZW1vdGUuc2VuZChxdWVyeV9hcmdzPSdyZWJvb3QnKVxuICAgIHRpbWUuc2xlZXAoMilcbiAgICBpZiBub3QgcmVtb3RlLnNlbmQodXJsPScvJywgcXVlcnlfYXJncz1Ob25lKTpcbiAgICAgICAgcHJpbnQoJ1shXSBSZW1vdGUgaXMgdnVsbmVyYWJsZScpXG4gICAgICAgIHJldHVybiBUcnVlXG4gICAgZWxzZTpcbiAgICAgICAgcHJpbnQoJ1srXSBSZW1vdGUgaXMgbm90IHZ1bG5lcmFibGUnKVxuICAgICAgICByZXR1cm4gRmFsc2VcblxuXG5kZWYgY21kKHJlbW90ZSwgYXJncyk6XG4gICAgaWYgbm90IGNoZWNrKHJlbW90ZSwgYXJncyk6XG4gICAgICAgIHJldHVybiBGYWxzZVxuICAgIGRhdGEgPSByZW1vdGUuc2VuZChxdWVyeV9hcmdzPWYne2FyZ3MuY21kfT53ZWJMaWIveCcpXG4gICAgaWYgZGF0YSBpcyBOb25lOlxuICAgICAgICByZXR1cm4gRmFsc2VcblxuICAgIGRhdGEgPSByZW1vdGUuc2VuZCh1cmw9Jy94JywgcXVlcnlfYXJncz1Ob25lKVxuICAgIGlmIGRhdGEgaXMgTm9uZSBvciBub3QgZGF0YS5zdGF0dXNfY29kZSA9PSAyMDA6XG4gICAgICAgIHByaW50KGYnWyFdIEVycm9yIGV4ZWN1dGUgY21kIFwie2FyZ3MuY21kfVwiJylcbiAgICAgICAgcmV0dXJuIEZhbHNlXG4gICAgcHJpbnQoZGF0YS50ZXh0KVxuICAgIHJldHVybiBUcnVlXG5cblxuZGVmIGNtZF9ibGluZChyZW1vdGUsIGFyZ3MpOlxuICAgIFwiXCJcIlxuICAgIEJsaW5kIGNvbW1hbmQgaW5qZWN0aW9uXG4gICAgXCJcIlwiXG4gICAgaWYgbm90IGNoZWNrKHJlbW90ZSwgYXJncyk6XG4gICAgICAgIHJldHVybiBGYWxzZVxuICAgIGRhdGEgPSByZW1vdGUuc2VuZChxdWVyeV9hcmdzPWYne2FyZ3MuY21kX2JsaW5kfScpXG4gICAgaWYgZGF0YSBpcyBOb25lIG9yIG5vdCBkYXRhLnN0YXR1c19jb2RlID09IDUwMDpcbiAgICAgICAgcHJpbnQoZidbLV0gRXJyb3IgZXhlY3V0ZSBjbWQgXCJ7YXJncy5jbWRfYmxpbmR9XCInKVxuICAgICAgICByZXR1cm4gRmFsc2VcbiAgICBwcmludChmJ1tpXSBUcnkgZXhlY3V0ZSBibGluZCBjbWQgXCJ7YXJncy5jbWRfYmxpbmR9XCInKVxuICAgIHJldHVybiBUcnVlXG5cblxuZGVmIHNoZWxsKHJlbW90ZSwgYXJncyk6XG4gICAgaWYgbm90IGNoZWNrKHJlbW90ZSwgYXJncyk6XG4gICAgICAgIHJldHVybiBGYWxzZVxuICAgIGRhdGEgPSByZW1vdGUuc2VuZCh1cmw9Jy9OJywgcXVlcnlfYXJncz1Ob25lKVxuXG4gICAgaWYgZGF0YS5zdGF0dXNfY29kZSA9PSA0MDQ6XG4gICAgICAgIHByaW50KGYnW2ldIFJlbW90ZSBcInthcmdzLnJob3N0fVwiIG5vdCBwd25lZCwgcHduaW5nIG5vdyEnKVxuICAgICAgICBkYXRhID0gcmVtb3RlLnNlbmQocXVlcnlfYXJncz0nZWNobyAtbiBQOjowOjA6Vz5OJylcbiAgICAgICAgaWYgZGF0YS5zdGF0dXNfY29kZSA9PSA0MDE6XG4gICAgICAgICAgICBwcmludChkYXRhLmhlYWRlcnMpXG4gICAgICAgICAgICBwcmludChkYXRhLnRleHQpXG4gICAgICAgICAgICByZXR1cm4gRmFsc2VcbiAgICAgICAgcmVtb3RlLnNlbmQocXVlcnlfYXJncz0nZWNobyA6LzovYmluL3NoPj5OJylcbiAgICAgICAgcmVtb3RlLnNlbmQocXVlcnlfYXJncz0nY2F0IE4+Pi9ldGMvcGFzc3dkJylcbiAgICAgICAgcmVtb3RlLnNlbmQocXVlcnlfYXJncz0nZHJvcGJlYXIgLVIgLUIgLXAgMTMzNycpXG4gICAgICAgIHJlbW90ZS5zZW5kKHF1ZXJ5X2FyZ3M9J2NhdCBOPndlYkxpYi9OJylcbiAgICBlbHNlOlxuICAgICAgICBwcmludChmJ1tpXSBSZW1vdGUgXCJ7YXJncy5yaG9zdH1cIiBhbHJlYWR5IHB3bmVkJylcblxuICAgIHByaW50KGYnWypdIFRyeWluZyBTU0ggdG8ge2FyZ3Mucmhvc3R9IG9uIHBvcnQgMTMzNycpXG4gICAgb3Muc3lzdGVtKGYnc3R0eSBlY2hvOyBzdHR5IGlleHRlbjsgc3R0eSBpY2Fub247IFxcXG4gICAgc3NoIC1vIFN0cmljdEhvc3RLZXlDaGVja2luZz1ubyAtbyBMb2dMZXZlbD1lcnJvciAtbyBVc2VyS25vd25Ib3N0c0ZpbGU9L2Rldi9udWxsIFxcXG4gICAgUEB7YXJncy5yaG9zdH0gLXAgMTMzNycpXG5cblxuZGVmIG1haW4oKTpcbiAgICBwcmludCgnWypdIEhpa3Zpc2lvbiBDVkUtMjAyMS0zNjI2MFxcblsqXSBQb0MgYnkgYmFzaGlzICIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHRhZyJ9fSxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gdGFnIn19LFtfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCI8IildKSxfdm0uX3YoIm1jdyIpXSksX3ZtLl92KCIgIiksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gYXR0ci1uYW1lIn19LFtfdm0uX3YoIm5vZW1haWwiKV0pLF92bS5fdigiICIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIGF0dHItbmFtZSJ9fSxbX3ZtLl92KCJldSIpXSksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiPiIpXSldKSxfdm0uX3YoIiAoMjAyMSknKVxuXG4gICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tcmhvc3QnLCByZXF1aXJlZD1UcnVlLCB0eXBlPXN0ciwgZGVmYXVsdD1Ob25lLCBoZWxwPSdSZW1vdGUgVGFyZ2V0IEFkZHJlc3MgKElQL0ZRRE4pJylcbiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctLXJwb3J0JywgcmVxdWlyZWQ9RmFsc2UsIHR5cGU9aW50LCBkZWZhdWx0PTgwLCBoZWxwPSdSZW1vdGUgVGFyZ2V0IFBvcnQnKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tY2hlY2snLCByZXF1aXJlZD1GYWxzZSwgZGVmYXVsdD1GYWxzZSwgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nQ2hlY2sgaWYgdnVsbmVyYWJsZScpXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1yZWJvb3QnLCByZXF1aXJlZD1GYWxzZSwgZGVmYXVsdD1GYWxzZSwgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nUmVib290IGlmIHZ1bG5lcmFibGUnKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tc2hlbGwnLCByZXF1aXJlZD1GYWxzZSwgZGVmYXVsdD1GYWxzZSwgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nTGF1bmNoIFNTSCBzaGVsbCcpXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1jbWQnLCByZXF1aXJlZD1GYWxzZSwgdHlwZT1zdHIsIGRlZmF1bHQ9Tm9uZSwgaGVscD0nZXhlY3V0ZSBjbWQgKGkuZTogXCJscyAtbFwiKScpXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1jbWRfYmxpbmQnLCByZXF1aXJlZD1GYWxzZSwgdHlwZT1zdHIsIGRlZmF1bHQ9Tm9uZSwgaGVscD0nZXhlY3V0ZSBibGluZCBjbWQgKGkuZTogXCJyZWJvb3RcIiknKVxuICAgIHBhcnNlci5hZGRfYXJndW1lbnQoXG4gICAgICAgICctLW5vdmVyaWZ5JywgcmVxdWlyZWQ9RmFsc2UsIGRlZmF1bHQ9RmFsc2UsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0RvIG5vdCB2ZXJpZnkgaWYgdnVsbmVyYWJsZSdcbiAgICApXG4gICAgcGFyc2VyLmFkZF9hcmd1bWVudChcbiAgICAgICAgJy0tcHJvdG8nLCByZXF1aXJlZD1GYWxzZSwgdHlwZT1zdHIsIGNob2ljZXM9WydodHRwJywgJ2h0dHBzJ10sIGRlZmF1bHQ9J2h0dHAnLCBoZWxwPSdQcm90b2NvbCB1c2VkJ1xuICAgIClcbiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKVxuXG4gICAgcmVtb3RlID0gSHR0cChhcmdzLnJob3N0LCBhcmdzLnJwb3J0LCBhcmdzLnByb3RvKVxuXG4gICAgdHJ5OlxuICAgICAgICBpZiBhcmdzLnNoZWxsOlxuICAgICAgICAgICAgc2hlbGwocmVtb3RlLCBhcmdzKVxuICAgICAgICBlbGlmIGFyZ3MuY21kOlxuICAgICAgICAgICAgY21kKHJlbW90ZSwgYXJncylcbiAgICAgICAgZWxpZiBhcmdzLmNtZF9ibGluZDpcbiAgICAgICAgICAgIGNtZF9ibGluZChyZW1vdGUsIGFyZ3MpXG4gICAgICAgIGVsaWYgYXJncy5jaGVjazpcbiAgICAgICAgICAgIGNoZWNrKHJlbW90ZSwgYXJncylcbiAgICAgICAgZWxpZiBhcmdzLnJlYm9vdDpcbiAgICAgICAgICAgIGNoZWNrX3JlYm9vdChyZW1vdGUsIGFyZ3MpXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBwYXJzZXIucGFyc2VfYXJncyhbJy1oJ10pXG4gICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OlxuICAgICAgICByZXR1cm4gRmFsc2VcblxuXG5pZiBfX25hbWVfXyA9PSAnX19tYWluX18nOlxuICAgIG1haW4oKVxuICAgICAgICAgICAgXG4iKV0pXSldKV0pfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}